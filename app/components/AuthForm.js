// components/AuthForm.js
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '../../lib/supabaseClient'
import styles from './AuthForm.module.css'

export default function AuthForm({ onSuccess }) {
  const router = useRouter()
  const [mode, setMode] = useState('login')
  const [studentId, setStudentId] = useState('')
  const [login, setLogin] = useState('')
  const [password, setPassword] = useState('')
  const [confirm, setConfirm] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const [emailSent, setEmailSent] = useState(false)
  const [telegramId, setTelegramId] = useState(null)
  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false)

  useEffect(() => {
    const initTelegram = () => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      const urlParams = new URLSearchParams(window.location.search);
      const urlTgId = urlParams.get('tg_user_id');
      
      if (urlTgId) {
        setTelegramId(urlTgId);
        setIsTelegramWebApp(true);
        console.log('Telegram ID from URL:', urlTgId);
        return;
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º Telegram Web App
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        setIsTelegramWebApp(true);
        
        // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ initDataUnsafe (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        if (window.Telegram.WebApp.initDataUnsafe?.user) {
          const user = window.Telegram.WebApp.initDataUnsafe.user;
          setTelegramId(user.id.toString());
          console.log('Telegram user from initDataUnsafe:', user);
          
          if (user.username && !login) {
            setLogin(`${user.username}@telegram.user`);
          }
        } 
        // –°–ø–æ—Å–æ–± 2: –ü–∞—Ä—Å–∏–º initData –≤—Ä—É—á–Ω—É—é
        else if (window.Telegram.WebApp.initData) {
          try {
            const params = new URLSearchParams(window.Telegram.WebApp.initData);
            const userParam = params.get('user');
            if (userParam) {
              const userData = JSON.parse(decodeURIComponent(userParam));
              setTelegramId(userData.id.toString());
              console.log('Telegram user from initData:', userData);
            }
          } catch (e) {
            console.error('Error parsing initData:', e);
          }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web App
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        if (window.Telegram.WebApp.BackButton) {
          window.Telegram.WebApp.BackButton.show();
          window.Telegram.WebApp.BackButton.onClick(() => {
            window.Telegram.WebApp.close();
          });
        }
      } else {
        console.warn('Not in Telegram Web App');
        setError('‚ùå –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ Telegram –±–æ—Ç–µ.');
      }
    };

    initTelegram();
  }, [login]);

  const switchMode = (newMode) => {
    setError('')
    setLoading(false)
    setEmailSent(false)
    setMode(newMode)
  }

  const handleLogin = async e => {
    e.preventDefault()
    setError('')
    setLoading(true)
    
    const { error } = await supabase.auth.signInWithPassword({
      email: login,
      password
    })
    
    setLoading(false)
    if (error) {
      setError(error.message)
    } else {
      if (onSuccess) {
        onSuccess()
      } else {
        router.push('/Personal')
      }
    }
  }

  const handleRegister = async e => {
    e.preventDefault()
    setError('')

    console.log('Current Telegram ID:', telegramId);
    
    if (!telegramId) {
      return setError('‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üéì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –≤ –±–æ—Ç–µ.')
    }

    const idNum = parseInt(studentId.trim(), 10)
    if (isNaN(idNum)) {
      return setError('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Student ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.')
    }

    if (password.length < 8 || !/\d/.test(password) || !/[A-Za-z]/.test(password)) {
      return setError('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã')
    }

    if (password !== confirm) {
      return setError('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
    }

    setLoading(true)
    
    try {
      console.log('Checking pending registration for Telegram ID:', telegramId);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ pending_registrations
      const { data: pendingData, error: pendingError } = await supabase
        .from('pending_registrations')
        .select('*')
        .eq('telegram_id', telegramId)
        .gt('expires_at', new Date().toISOString())
        .single()

      if (pendingError) {
        console.error('Pending registration error:', pendingError);
        if (pendingError.code === 'PGRST116') {
          throw new Error('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.')
        }
      }

      if (!pendingData) {
        throw new Error('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
      }

      console.log('Pending data found:', pendingData);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º student_id
      const { data: stud, error: studError } = await supabase
        .from('students')
        .select('auth_user_id, telegram_id, firstname, lastname')
        .eq('student_id', idNum)
        .single()

      if (studError) {
        console.error('Student check error:', studError);
        if (studError.code === 'PGRST116') {
          throw new Error('‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        }
        throw new Error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Student ID.')
      }

      if (!stud) {
        throw new Error('‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
      }

      if (stud.auth_user_id) {
        throw new Error('‚ùå –≠—Ç–æ—Ç Student ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.')
      }

      if (stud.telegram_id && stud.telegram_id !== telegramId) {
        throw new Error('‚ùå –≠—Ç–æ—Ç Student ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.')
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∫ –¥—Ä—É–≥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
      const { data: existingTelegram, error: tgError } = await supabase
        .from('students')
        .select('student_id, firstname, lastname')
        .eq('telegram_id', telegramId)
        .single()

      if (existingTelegram && existingTelegram.student_id !== idNum) {
        throw new Error(`‚ùå –í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—Ç—É–¥–µ–Ω—Ç—É: ${existingTelegram.firstname} ${existingTelegram.lastname}`)
      }

      // 4. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const email = pendingData.phone_number ? 
        `${pendingData.phone_number.replace('+', '')}@campus.ru` : 
        `tg${telegramId}@telegram.user`;
      
      console.log('Creating user with email:', email);
      
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: email,
        password: password
      })

      if (authError) {
        console.error('Auth error:', authError);
        throw authError;
      }

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞
      const { error: updateError } = await supabase
        .from('students')
        .update({ 
          auth_user_id: authData.user.id,
          email: email,
          telegram_id: telegramId,
          phone_number: pendingData.phone_number,
          telegram_username: pendingData.username,
          registration_date: new Date().toISOString(),
          is_active: true
        })
        .eq('student_id', idNum)

      if (updateError) {
        console.error('Update error:', updateError);
        throw updateError;
      }

      // 6. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await supabase
        .from('pending_registrations')
        .delete()
        .eq('telegram_id', telegramId)

      // 7. –ê–≤—Ç–æ–≤—Ö–æ–¥
      const { error: loginError } = await supabase.auth.signInWithPassword({
        email: email,
        password: password
      })

      if (loginError) {
        console.error('Login error:', loginError);
        throw loginError;
      }

      console.log('Registration successful!');
      
      // 8. –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      if (isTelegramWebApp && window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', () => {
          window.Telegram.WebApp.close();
        });
      } else if (onSuccess) {
        onSuccess();
      } else {
        router.push('/Personal');
      }

    } catch (err) {
      console.error('Registration error:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }

  const handleForgotPassword = async e => {
    e.preventDefault()
    setError('')
    setLoading(true)

    if (!login.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ email')
      setLoading(false)
      return
    }

    const { error } = await supabase.auth.resetPasswordForEmail(login, {
      redirectTo: `${window.location.origin}/auth/update-password`,
    })

    setLoading(false)
    if (error) {
      setError(error.message)
    } else {
      setEmailSent(true)
    }
  }

  if (mode === 'forgot') {
    return (
      <div className={styles.container}>
        <h2 className={styles.title}>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>

        {emailSent ? (
          <div className={styles.successMessage}>
            <p>–ü–∏—Å—å–º–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {login}</p>
            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º</p>
            <button
              onClick={() => switchMode('login')}
              className={styles.switchButton}
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </button>
          </div>
        ) : (
          <form onSubmit={handleForgotPassword} className={styles.form}>
            <label className={styles.label}>
              –í–∞—à email:
              <input
                type="email"
                value={login}
                onChange={e => setLogin(e.target.value)}
                required
                className={styles.input}
                placeholder="–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
              />
            </label>

            {error && <p className={styles.error}>{error}</p>}

            <button
              type="submit"
              disabled={loading}
              className={styles.submitButton}
            >
              {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
            </button>

            <p className={styles.switchText}>
              –í—Å–ø–æ–º–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å?
              <button
                onClick={() => switchMode('login')}
                className={styles.switchButton}
              >
                –í–æ–π—Ç–∏
              </button>
            </p>
          </form>
        )}
      </div>
    )
  }

  return (
    <div className={styles.container}>
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {telegramId && (
        <div style={{ 
          background: '#e3f2fd', 
          padding: '10px', 
          borderRadius: '5px', 
          marginBottom: '15px',
          fontSize: '14px',
          border: '1px solid #90caf9'
        }}>
          <strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br />
          Telegram ID: {telegramId}<br />
          –†–µ–∂–∏–º: {isTelegramWebApp ? 'Telegram Web App' : '–û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä'}
        </div>
      )}

      <h2 className={styles.title}>
        {mode === 'login' ? '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
      </h2>

      <form
        onSubmit={mode === 'login' ? handleLogin : handleRegister}
        className={styles.form}
      >
        {mode === 'register' && (
          <>
            <label className={styles.label}>
              Student ID:
              <input
                type="text"
                value={studentId}
                onChange={e => setStudentId(e.target.value)}
                required
                className={styles.input}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Student ID"
              />
            </label>
          </>
        )}

        <label className={styles.label}>
          –í–∞—à email:
          <input
            type="email"
            value={login}
            onChange={e => setLogin(e.target.value)}
            required
            className={styles.input}
            placeholder="example@email.com"
          />
        </label>

        <label className={styles.label}>
          –ü–∞—Ä–æ–ª—å:
          <input
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            required
            className={styles.input}
            placeholder="–ù–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤"
          />
        </label>

        {mode === 'register' && (
          <label className={styles.label}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:
            <input
              type="password"
              value={confirm}
              onChange={e => setConfirm(e.target.value)}
              required
              className={styles.input}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </label>
        )}

        {error && <p className={styles.error}>{error}</p>}

        <button
          type="submit"
          disabled={loading}
          className={styles.submitButton}
        >
          {loading ? '...' : mode === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
        </button>
      </form>

      <p className={styles.switchText}>
        {mode === 'login' ? (
          <>
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?
            <button
              onClick={() => switchMode('register')}
              className={styles.switchButton}
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </>
        ) : (
          <>
            –ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?
            <button
              onClick={() => switchMode('login')}
              className={styles.switchButton}
            >
              –í—Ö–æ–¥
            </button>
          </>
        )}
      </p>

      {mode === 'login' && (
        <p className={styles.switchText}>
          –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
          <button
            onClick={() => switchMode('forgot')}
            className={styles.switchButton}
          >
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </button>
        </p>
      )}
    </div>
  )
}